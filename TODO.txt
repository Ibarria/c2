###################### TODO items #######################

* Ensure we do not support more than 1 pointer for dereference. 
     This is correct:
        var: *MyStruct;
        var.a = 3;
     This is not valid:
        var: **MyStruct;
        var.a = 3;
* Pointers and Arrays to be able to do varargs, and an easy way to do printf
* bytecode can call foreign functions (for printf)
* plan on making the C backend much more similar to bytecode
* ensure local functions and local structs do not clash with other locals in other scopes
* Support pointers
** Have a dereference operator for pointers
* Maybe support array initializers (a : [] arr = {1, 2, 3, 4};)
* write cast function (built in)
* implement local functions on the C generator
* do conditionals
* do for loop (with it)
* enum support
* support default initializers (implicit to 0)
* support for explicit defaults
* support to skip default initialization
* support for new and delete
* support for defined size arrays
* support for dynamic arrays
* support for parameters of type array, string
* support for return type of array, string
* support 'import' directive, where structs, enums, vars and functions are declared tied to a dll/lib
** ensure imports are separate libraries, do not use extension for imports, define what libs to 
** link against (or make it implicit, with a custom dll)
* support  'load' directive, where the Parser will try to load a new text file and put things together
** protect against recursive loads
* Implement #assert (compile time assert directive)
* Implement #check_call (compile time check on a function)
* Future stuff: polymorphism, baking, inline, LLVM

---- DONE -----
- ASSIGN is not an expression! 
- Always have a type (even void)
- create `true` and `false` basic types for bool
- basic 'import' support added
- Have an Interpreter class for
-- Pool allocation of AST
-- Predefined types (INT, FLOAT, STRING, BOOL)
- Write bytecode instruction specification
- Write bytecode generator
- write bytecode interpreter
- check that a variable exists before using it (assignment, expression, etc)
- do check for types when calling a function
- check the type of return values in a function, and the existence of a return statement
- check that a function call is a variable of type function
- do check for size when doing explicit declaration (x : s8 = 512)
- do check for size and sign on explicit declarartion (x : u8 = -1)
- do check for types on assignment
- struct support

#####  LEXER  #####
* Support _ in numbers for clarity

- Floating number can be .5
- Number to support float (period)
- Support numbers of differnt precision
- Handle line comments
- We need a way to know what line, column we're parsing when there is an error
- Lexer.cpp needs a way to handle errors and print to screen
- Handle String type
- Handle multiline comments

#####   PARSER  #####
* Be able to parse conditionals
- Create Basic AST hierarchy
- Be able to parse variable declaration
- Be able to parse functions
- Be able to parse blocks
- Be able to parse assignments
- Be able to parse Math expressions
- Print AST on the screen

